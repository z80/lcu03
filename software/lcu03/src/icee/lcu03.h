// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `lcu03.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __lcu03_h__
#define __lcu03_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <factory.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Device
{

class Lcu03;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Device::Lcu03>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Device::Lcu03*);

}

}

namespace Device
{

class Lcu03;
bool operator==(const Lcu03&, const Lcu03&);
bool operator<(const Lcu03&, const Lcu03&);
::Ice::Object* upCast(::Device::Lcu03*);
typedef ::IceInternal::Handle< ::Device::Lcu03> Lcu03Ptr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Device::Lcu03> Lcu03Prx;
void __patch(Lcu03Ptr&, const ::Ice::ObjectPtr&);

}

namespace Device
{

class Callback_Lcu03_setShutter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lcu03_setShutter_Base> Callback_Lcu03_setShutterPtr;

class Callback_Lcu03_shutter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lcu03_shutter_Base> Callback_Lcu03_shutterPtr;

class Callback_Lcu03_setPower_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lcu03_setPower_Base> Callback_Lcu03_setPowerPtr;

class Callback_Lcu03_power_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lcu03_power_Base> Callback_Lcu03_powerPtr;

class Callback_Lcu03_setPolHor_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lcu03_setPolHor_Base> Callback_Lcu03_setPolHorPtr;

class Callback_Lcu03_polHor_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lcu03_polHor_Base> Callback_Lcu03_polHorPtr;

}

namespace IceProxy
{

namespace Device
{

class Lcu03 : virtual public ::IceProxy::Factory::DeviceAbs
{
public:

    bool setShutter(bool open)
    {
        return setShutter(open, 0);
    }
    bool setShutter(bool open, const ::Ice::Context& __ctx)
    {
        return setShutter(open, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setShutter(bool open, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setShutter(open, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setShutter(bool open, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setShutter(open, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setShutter(bool open, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setShutter(open, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setShutter(bool open, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setShutter(open, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setShutter(bool open, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Device::Lcu03Prx __proxy = ::Device::Lcu03Prx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_setShutter(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_setShutter(open, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setShutter(bool open)
    {
        return begin_setShutter(open, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setShutter(bool open, const ::Ice::Context& __ctx)
    {
        return begin_setShutter(open, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setShutter(bool open, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setShutter(open, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setShutter(bool open, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setShutter(open, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setShutter(bool open, const ::Device::Callback_Lcu03_setShutterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setShutter(open, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setShutter(bool open, const ::Ice::Context& __ctx, const ::Device::Callback_Lcu03_setShutterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setShutter(open, &__ctx, __del, __cookie);
    }

    bool end_setShutter(const ::Ice::AsyncResultPtr&);
    
private:

    bool setShutter(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setShutter(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool shutter(bool& open)
    {
        return shutter(open, 0);
    }
    bool shutter(bool& open, const ::Ice::Context& __ctx)
    {
        return shutter(open, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutter(const ::IceInternal::Function<void (bool, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_shutter(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_shutter(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutter(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutter(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_shutter(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_shutter(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutter(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_shutter(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool, bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Device::Lcu03Prx __proxy = ::Device::Lcu03Prx::uncheckedCast(__result->getProxy());
                bool open;
                bool __ret;
                try
                {
                    __ret = __proxy->end_shutter(open, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, open);
                }
            }
        
        private:
            
            ::std::function<void (bool, bool)> _response;
        };
        return begin_shutter(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_shutter()
    {
        return begin_shutter(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutter(const ::Ice::Context& __ctx)
    {
        return begin_shutter(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutter(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutter(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutter(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutter(const ::Device::Callback_Lcu03_shutterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutter(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutter(const ::Ice::Context& __ctx, const ::Device::Callback_Lcu03_shutterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutter(&__ctx, __del, __cookie);
    }

    bool end_shutter(bool& open, const ::Ice::AsyncResultPtr&);
    
private:

    bool shutter(bool&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutter(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool setPower(::Ice::Double value)
    {
        return setPower(value, 0);
    }
    bool setPower(::Ice::Double value, const ::Ice::Context& __ctx)
    {
        return setPower(value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPower(::Ice::Double value, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPower(value, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPower(::Ice::Double value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPower(value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPower(::Ice::Double value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPower(value, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPower(::Ice::Double value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPower(value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPower(::Ice::Double value, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Device::Lcu03Prx __proxy = ::Device::Lcu03Prx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_setPower(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_setPower(value, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPower(::Ice::Double value)
    {
        return begin_setPower(value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPower(::Ice::Double value, const ::Ice::Context& __ctx)
    {
        return begin_setPower(value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPower(::Ice::Double value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPower(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPower(::Ice::Double value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPower(value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPower(::Ice::Double value, const ::Device::Callback_Lcu03_setPowerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPower(value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPower(::Ice::Double value, const ::Ice::Context& __ctx, const ::Device::Callback_Lcu03_setPowerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPower(value, &__ctx, __del, __cookie);
    }

    bool end_setPower(const ::Ice::AsyncResultPtr&);
    
private:

    bool setPower(::Ice::Double, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPower(::Ice::Double, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool power(::Ice::Double& value)
    {
        return power(value, 0);
    }
    bool power(::Ice::Double& value, const ::Ice::Context& __ctx)
    {
        return power(value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_power(const ::IceInternal::Function<void (bool, ::Ice::Double)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_power(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_power(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_power(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_power(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, ::Ice::Double)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_power(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_power(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_power(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_power(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, ::Ice::Double)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool, ::Ice::Double)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Device::Lcu03Prx __proxy = ::Device::Lcu03Prx::uncheckedCast(__result->getProxy());
                ::Ice::Double value;
                bool __ret;
                try
                {
                    __ret = __proxy->end_power(value, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, value);
                }
            }
        
        private:
            
            ::std::function<void (bool, ::Ice::Double)> _response;
        };
        return begin_power(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_power()
    {
        return begin_power(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_power(const ::Ice::Context& __ctx)
    {
        return begin_power(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_power(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_power(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_power(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_power(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_power(const ::Device::Callback_Lcu03_powerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_power(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_power(const ::Ice::Context& __ctx, const ::Device::Callback_Lcu03_powerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_power(&__ctx, __del, __cookie);
    }

    bool end_power(::Ice::Double& value, const ::Ice::AsyncResultPtr&);
    
private:

    bool power(::Ice::Double&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_power(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool setPolHor(bool hor)
    {
        return setPolHor(hor, 0);
    }
    bool setPolHor(bool hor, const ::Ice::Context& __ctx)
    {
        return setPolHor(hor, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setPolHor(bool hor, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPolHor(hor, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPolHor(bool hor, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPolHor(hor, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setPolHor(bool hor, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setPolHor(hor, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setPolHor(bool hor, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setPolHor(hor, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setPolHor(bool hor, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Device::Lcu03Prx __proxy = ::Device::Lcu03Prx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_setPolHor(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_setPolHor(hor, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setPolHor(bool hor)
    {
        return begin_setPolHor(hor, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPolHor(bool hor, const ::Ice::Context& __ctx)
    {
        return begin_setPolHor(hor, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPolHor(bool hor, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPolHor(hor, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPolHor(bool hor, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPolHor(hor, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPolHor(bool hor, const ::Device::Callback_Lcu03_setPolHorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPolHor(hor, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setPolHor(bool hor, const ::Ice::Context& __ctx, const ::Device::Callback_Lcu03_setPolHorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setPolHor(hor, &__ctx, __del, __cookie);
    }

    bool end_setPolHor(const ::Ice::AsyncResultPtr&);
    
private:

    bool setPolHor(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setPolHor(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool polHor(bool& hor)
    {
        return polHor(hor, 0);
    }
    bool polHor(bool& hor, const ::Ice::Context& __ctx)
    {
        return polHor(hor, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_polHor(const ::IceInternal::Function<void (bool, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_polHor(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_polHor(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_polHor(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_polHor(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_polHor(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_polHor(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_polHor(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_polHor(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool, bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Device::Lcu03Prx __proxy = ::Device::Lcu03Prx::uncheckedCast(__result->getProxy());
                bool hor;
                bool __ret;
                try
                {
                    __ret = __proxy->end_polHor(hor, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, hor);
                }
            }
        
        private:
            
            ::std::function<void (bool, bool)> _response;
        };
        return begin_polHor(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_polHor()
    {
        return begin_polHor(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_polHor(const ::Ice::Context& __ctx)
    {
        return begin_polHor(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_polHor(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_polHor(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_polHor(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_polHor(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_polHor(const ::Device::Callback_Lcu03_polHorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_polHor(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_polHor(const ::Ice::Context& __ctx, const ::Device::Callback_Lcu03_polHorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_polHor(&__ctx, __del, __cookie);
    }

    bool end_polHor(bool& hor, const ::Ice::AsyncResultPtr&);
    
private:

    bool polHor(bool&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_polHor(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Lcu03> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_secure(bool __secure) const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_twoway() const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_oneway() const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_batchOneway() const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_datagram() const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_batchDatagram() const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_compress(bool __compress) const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Lcu03> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Lcu03*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Device
{

class Lcu03 : virtual public ::IceDelegate::Factory::DeviceAbs
{
public:

    virtual bool setShutter(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool shutter(bool&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool setPower(::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool power(::Ice::Double&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool setPolHor(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool polHor(bool&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Device
{

class Lcu03 : virtual public ::IceDelegate::Device::Lcu03,
              virtual public ::IceDelegateM::Factory::DeviceAbs
{
public:

    virtual bool setShutter(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool shutter(bool&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool setPower(::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool power(::Ice::Double&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool setPolHor(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool polHor(bool&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Device
{

class Lcu03 : virtual public ::IceDelegate::Device::Lcu03,
              virtual public ::IceDelegateD::Factory::DeviceAbs
{
public:

    virtual bool setShutter(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool shutter(bool&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool setPower(::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool power(::Ice::Double&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool setPolHor(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool polHor(bool&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Device
{

class Lcu03 : virtual public ::Factory::DeviceAbs
{
public:

    typedef Lcu03Prx ProxyType;
    typedef Lcu03Ptr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool setShutter(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setShutter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool shutter(bool&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool setPower(::Ice::Double, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPower(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool power(::Ice::Double&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___power(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool setPolHor(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setPolHor(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool polHor(bool&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___polHor(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Lcu03& l, const Lcu03& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Lcu03& l, const Lcu03& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Device
{

template<class T>
class CallbackNC_Lcu03_setShutter : public Callback_Lcu03_setShutter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Lcu03_setShutter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Device::Lcu03Prx __proxy = ::Device::Lcu03Prx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setShutter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Lcu03_setShutterPtr
newCallback_Lcu03_setShutter(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lcu03_setShutter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Lcu03_setShutterPtr
newCallback_Lcu03_setShutter(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lcu03_setShutter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Lcu03_setShutter : public Callback_Lcu03_setShutter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Lcu03_setShutter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Device::Lcu03Prx __proxy = ::Device::Lcu03Prx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setShutter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Lcu03_setShutterPtr
newCallback_Lcu03_setShutter(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lcu03_setShutter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Lcu03_setShutterPtr
newCallback_Lcu03_setShutter(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lcu03_setShutter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Lcu03_shutter : public Callback_Lcu03_shutter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, bool);

    CallbackNC_Lcu03_shutter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Device::Lcu03Prx __proxy = ::Device::Lcu03Prx::uncheckedCast(__result->getProxy());
        bool open;
        bool __ret;
        try
        {
            __ret = __proxy->end_shutter(open, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, open);
        }
    }

    Response response;
};

template<class T> Callback_Lcu03_shutterPtr
newCallback_Lcu03_shutter(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lcu03_shutter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Lcu03_shutterPtr
newCallback_Lcu03_shutter(T* instance, void (T::*cb)(bool, bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lcu03_shutter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Lcu03_shutter : public Callback_Lcu03_shutter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, bool, const CT&);

    Callback_Lcu03_shutter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Device::Lcu03Prx __proxy = ::Device::Lcu03Prx::uncheckedCast(__result->getProxy());
        bool open;
        bool __ret;
        try
        {
            __ret = __proxy->end_shutter(open, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, open, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Lcu03_shutterPtr
newCallback_Lcu03_shutter(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lcu03_shutter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Lcu03_shutterPtr
newCallback_Lcu03_shutter(T* instance, void (T::*cb)(bool, bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lcu03_shutter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Lcu03_setPower : public Callback_Lcu03_setPower_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Lcu03_setPower(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Device::Lcu03Prx __proxy = ::Device::Lcu03Prx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setPower(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Lcu03_setPowerPtr
newCallback_Lcu03_setPower(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lcu03_setPower<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Lcu03_setPowerPtr
newCallback_Lcu03_setPower(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lcu03_setPower<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Lcu03_setPower : public Callback_Lcu03_setPower_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Lcu03_setPower(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Device::Lcu03Prx __proxy = ::Device::Lcu03Prx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setPower(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Lcu03_setPowerPtr
newCallback_Lcu03_setPower(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lcu03_setPower<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Lcu03_setPowerPtr
newCallback_Lcu03_setPower(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lcu03_setPower<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Lcu03_power : public Callback_Lcu03_power_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, ::Ice::Double);

    CallbackNC_Lcu03_power(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Device::Lcu03Prx __proxy = ::Device::Lcu03Prx::uncheckedCast(__result->getProxy());
        ::Ice::Double value;
        bool __ret;
        try
        {
            __ret = __proxy->end_power(value, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, value);
        }
    }

    Response response;
};

template<class T> Callback_Lcu03_powerPtr
newCallback_Lcu03_power(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, ::Ice::Double), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lcu03_power<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Lcu03_powerPtr
newCallback_Lcu03_power(T* instance, void (T::*cb)(bool, ::Ice::Double), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lcu03_power<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Lcu03_power : public Callback_Lcu03_power_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, ::Ice::Double, const CT&);

    Callback_Lcu03_power(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Device::Lcu03Prx __proxy = ::Device::Lcu03Prx::uncheckedCast(__result->getProxy());
        ::Ice::Double value;
        bool __ret;
        try
        {
            __ret = __proxy->end_power(value, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, value, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Lcu03_powerPtr
newCallback_Lcu03_power(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, ::Ice::Double, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lcu03_power<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Lcu03_powerPtr
newCallback_Lcu03_power(T* instance, void (T::*cb)(bool, ::Ice::Double, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lcu03_power<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Lcu03_setPolHor : public Callback_Lcu03_setPolHor_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Lcu03_setPolHor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Device::Lcu03Prx __proxy = ::Device::Lcu03Prx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setPolHor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Lcu03_setPolHorPtr
newCallback_Lcu03_setPolHor(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lcu03_setPolHor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Lcu03_setPolHorPtr
newCallback_Lcu03_setPolHor(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lcu03_setPolHor<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Lcu03_setPolHor : public Callback_Lcu03_setPolHor_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Lcu03_setPolHor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Device::Lcu03Prx __proxy = ::Device::Lcu03Prx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_setPolHor(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Lcu03_setPolHorPtr
newCallback_Lcu03_setPolHor(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lcu03_setPolHor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Lcu03_setPolHorPtr
newCallback_Lcu03_setPolHor(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lcu03_setPolHor<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Lcu03_polHor : public Callback_Lcu03_polHor_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, bool);

    CallbackNC_Lcu03_polHor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Device::Lcu03Prx __proxy = ::Device::Lcu03Prx::uncheckedCast(__result->getProxy());
        bool hor;
        bool __ret;
        try
        {
            __ret = __proxy->end_polHor(hor, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, hor);
        }
    }

    Response response;
};

template<class T> Callback_Lcu03_polHorPtr
newCallback_Lcu03_polHor(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lcu03_polHor<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Lcu03_polHorPtr
newCallback_Lcu03_polHor(T* instance, void (T::*cb)(bool, bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lcu03_polHor<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Lcu03_polHor : public Callback_Lcu03_polHor_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, bool, const CT&);

    Callback_Lcu03_polHor(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Device::Lcu03Prx __proxy = ::Device::Lcu03Prx::uncheckedCast(__result->getProxy());
        bool hor;
        bool __ret;
        try
        {
            __ret = __proxy->end_polHor(hor, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, hor, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Lcu03_polHorPtr
newCallback_Lcu03_polHor(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lcu03_polHor<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Lcu03_polHorPtr
newCallback_Lcu03_polHor(T* instance, void (T::*cb)(bool, bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lcu03_polHor<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
